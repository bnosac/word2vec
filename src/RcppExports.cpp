// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// w2v_train
Rcpp::List w2v_train(Rcpp::List texts_, Rcpp::CharacterVector stopWords_, std::string trainFile, std::string modelFile, std::string stopWordsFile, uint16_t minWordFreq, uint16_t size, uint8_t window, uint16_t expTableSize, uint8_t expValueMax, float sample, bool withHS, uint8_t negative, uint8_t threads, uint8_t iterations, float alpha, bool withSG, std::string wordDelimiterChars, std::string endOfSentenceChars, bool verbose, bool normalize);
RcppExport SEXP _word2vec_w2v_train(SEXP texts_SEXP, SEXP stopWords_SEXP, SEXP trainFileSEXP, SEXP modelFileSEXP, SEXP stopWordsFileSEXP, SEXP minWordFreqSEXP, SEXP sizeSEXP, SEXP windowSEXP, SEXP expTableSizeSEXP, SEXP expValueMaxSEXP, SEXP sampleSEXP, SEXP withHSSEXP, SEXP negativeSEXP, SEXP threadsSEXP, SEXP iterationsSEXP, SEXP alphaSEXP, SEXP withSGSEXP, SEXP wordDelimiterCharsSEXP, SEXP endOfSentenceCharsSEXP, SEXP verboseSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type texts_(texts_SEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type stopWords_(stopWords_SEXP);
    Rcpp::traits::input_parameter< std::string >::type trainFile(trainFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type modelFile(modelFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type stopWordsFile(stopWordsFileSEXP);
    Rcpp::traits::input_parameter< uint16_t >::type minWordFreq(minWordFreqSEXP);
    Rcpp::traits::input_parameter< uint16_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< uint8_t >::type window(windowSEXP);
    Rcpp::traits::input_parameter< uint16_t >::type expTableSize(expTableSizeSEXP);
    Rcpp::traits::input_parameter< uint8_t >::type expValueMax(expValueMaxSEXP);
    Rcpp::traits::input_parameter< float >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< bool >::type withHS(withHSSEXP);
    Rcpp::traits::input_parameter< uint8_t >::type negative(negativeSEXP);
    Rcpp::traits::input_parameter< uint8_t >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< uint8_t >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< float >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type withSG(withSGSEXP);
    Rcpp::traits::input_parameter< std::string >::type wordDelimiterChars(wordDelimiterCharsSEXP);
    Rcpp::traits::input_parameter< std::string >::type endOfSentenceChars(endOfSentenceCharsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(w2v_train(texts_, stopWords_, trainFile, modelFile, stopWordsFile, minWordFreq, size, window, expTableSize, expValueMax, sample, withHS, negative, threads, iterations, alpha, withSG, wordDelimiterChars, endOfSentenceChars, verbose, normalize));
    return rcpp_result_gen;
END_RCPP
}
// w2v_load_model
Rcpp::List w2v_load_model(std::string file, bool normalize);
RcppExport SEXP _word2vec_w2v_load_model(SEXP fileSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(w2v_load_model(file, normalize));
    return rcpp_result_gen;
END_RCPP
}
// w2v_save_model
bool w2v_save_model(SEXP ptr, std::string file);
RcppExport SEXP _word2vec_w2v_save_model(SEXP ptrSEXP, SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(w2v_save_model(ptr, file));
    return rcpp_result_gen;
END_RCPP
}
// w2v_dictionary
std::vector<std::string> w2v_dictionary(SEXP ptr);
RcppExport SEXP _word2vec_w2v_dictionary(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(w2v_dictionary(ptr));
    return rcpp_result_gen;
END_RCPP
}
// w2v_embedding
Rcpp::NumericMatrix w2v_embedding(SEXP ptr, Rcpp::StringVector x);
RcppExport SEXP _word2vec_w2v_embedding(SEXP ptrSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(w2v_embedding(ptr, x));
    return rcpp_result_gen;
END_RCPP
}
// w2v_nearest
Rcpp::DataFrame w2v_nearest(SEXP ptr, std::string x, std::size_t top_n, float min_distance);
RcppExport SEXP _word2vec_w2v_nearest(SEXP ptrSEXP, SEXP xSEXP, SEXP top_nSEXP, SEXP min_distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type top_n(top_nSEXP);
    Rcpp::traits::input_parameter< float >::type min_distance(min_distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(w2v_nearest(ptr, x, top_n, min_distance));
    return rcpp_result_gen;
END_RCPP
}
// w2v_nearest_vector
Rcpp::List w2v_nearest_vector(SEXP ptr, const std::vector<float>& x, std::size_t top_n, float min_distance);
RcppExport SEXP _word2vec_w2v_nearest_vector(SEXP ptrSEXP, SEXP xSEXP, SEXP top_nSEXP, SEXP min_distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const std::vector<float>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type top_n(top_nSEXP);
    Rcpp::traits::input_parameter< float >::type min_distance(min_distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(w2v_nearest_vector(ptr, x, top_n, min_distance));
    return rcpp_result_gen;
END_RCPP
}
// w2v_read_binary
Rcpp::NumericMatrix w2v_read_binary(const std::string modelFile, bool normalize, std::size_t n);
RcppExport SEXP _word2vec_w2v_read_binary(SEXP modelFileSEXP, SEXP normalizeSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type modelFile(modelFileSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(w2v_read_binary(modelFile, normalize, n));
    return rcpp_result_gen;
END_RCPP
}
// d2vec
Rcpp::List d2vec(SEXP ptr, Rcpp::StringVector x, std::string wordDelimiterChars);
RcppExport SEXP _word2vec_d2vec(SEXP ptrSEXP, SEXP xSEXP, SEXP wordDelimiterCharsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type wordDelimiterChars(wordDelimiterCharsSEXP);
    rcpp_result_gen = Rcpp::wrap(d2vec(ptr, x, wordDelimiterChars));
    return rcpp_result_gen;
END_RCPP
}
// d2vec_nearest
Rcpp::DataFrame d2vec_nearest(SEXP ptr_w2v, SEXP ptr_d2v, Rcpp::StringVector x, std::string wordDelimiterChars);
RcppExport SEXP _word2vec_d2vec_nearest(SEXP ptr_w2vSEXP, SEXP ptr_d2vSEXP, SEXP xSEXP, SEXP wordDelimiterCharsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr_w2v(ptr_w2vSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr_d2v(ptr_d2vSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type wordDelimiterChars(wordDelimiterCharsSEXP);
    rcpp_result_gen = Rcpp::wrap(d2vec_nearest(ptr_w2v, ptr_d2v, x, wordDelimiterChars));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_word2vec_w2v_train", (DL_FUNC) &_word2vec_w2v_train, 21},
    {"_word2vec_w2v_load_model", (DL_FUNC) &_word2vec_w2v_load_model, 2},
    {"_word2vec_w2v_save_model", (DL_FUNC) &_word2vec_w2v_save_model, 2},
    {"_word2vec_w2v_dictionary", (DL_FUNC) &_word2vec_w2v_dictionary, 1},
    {"_word2vec_w2v_embedding", (DL_FUNC) &_word2vec_w2v_embedding, 2},
    {"_word2vec_w2v_nearest", (DL_FUNC) &_word2vec_w2v_nearest, 4},
    {"_word2vec_w2v_nearest_vector", (DL_FUNC) &_word2vec_w2v_nearest_vector, 4},
    {"_word2vec_w2v_read_binary", (DL_FUNC) &_word2vec_w2v_read_binary, 3},
    {"_word2vec_d2vec", (DL_FUNC) &_word2vec_d2vec, 3},
    {"_word2vec_d2vec_nearest", (DL_FUNC) &_word2vec_d2vec_nearest, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_word2vec(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
